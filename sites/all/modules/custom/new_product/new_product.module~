<?php
/**
* @ file
* this is my module
*/

/**
* Implement hook_menu
*/

function new_product_menu(){
$items['new product']= array(
'title' => 'Add new product',
'description' => t('Add new product'),
'page callback' => 'drupal_get_form',
'page arguments' => array('new_product_form'),
'page callback'=>TRUE,
'type' => MENU_LOCAL_TASK,
'weight' =>0,
);
return $items;
}

function new_product_form() {
	$form['product_name'] = array(
	'#title' => t('Product Name'),
	'#type' => 'textfield',
	'#required' => TRUE,
	'#description' => t('Please enter product name.'),
	);
 
	// Product picture
	$form['picture'] = array('#type' => 'fieldset',
                               '#title' => t('Product image'));

    	$form['picture']['picture_upload'] = array('#type' => 'file', 
                '#title' => t('Upload product image'),
                 '#size' => 48, 
		'#description' => t('Maximum dimensions are %dimensions and the maximum size is %size kB.', array('%dimensions' => 	'250x250', '%size' => '30')));
 
    	//$form['#validate'][] = 'product_validate_picture';
 
	$form['submit'] = array(
	'#type' => 'submit',
	'#value' => t('Submit'),
	);
 
	//$form['#redirect'] = 'product_list';	
	$form['#attributes']['enctype'] = 'multipart/form-data';
 
	return $form;
}

/*

function product_validate_picture(&$form, &$form_state) {
	$validators = array(
    		'file_validate_is_image' => array(),
	    	'file_validate_image_resolution' => array('250x250')),
    		'file_validate_size' => array(30 * 1024),
  	);
  	if ($file = file_save_upload('picture_upload', $validators)) {
    		// Remove the old picture.
    		if (isset($form_state['values']['_product']->image_path) && file_exists($form_state['values']['_product']->image_path)){
      			file_delete($form_state['values']['_product']->image_path);
    		}
 
		$productid = 0;
		if (!isset($form_state['values']['productid'])) { // Execute in case of new product
			$query = "SHOW TABLE STATUS LIKE 'product'";
			$rs = db_query($query);
			$row = db_fetch_object($rs);
 
			$productid = isset($row->Auto_increment) ? $row->Auto_increment : 0;
		}
		else {
			$productid = $form_state['values']['productid'];
		}
 
		$info = image_get_info($file->filepath);
    		$destination = variable_get('product_picture_path', 'product_pictures') .'/picture-'. $productid .'.'. $info['extension'];
    		if (file_copy($file, $destination, FILE_EXISTS_REPLACE)) {
      			$form_state['values']['picture'] = $file->filepath;
    		}
    		else {
      			form_set_error('picture_upload', t("Failed to upload the picture image; the %directory directory doesn't exist or is not writable.", 
                        array('%directory' => variable_get('product_picture_path', 'product_pictures'))));
    		}
  	}
}
*/

function new_product_form_submit($form, &$form_state) {
	//$form_values = $form['values'];
 
	//$product_name = trim($form_values['product_name']);
       $product_name = trim($form_state['values']['product_name']);

	//$image_path = $form_values['picture'];
       $img_path = $form_state['values']['picture'];

  /*
	$query = "INSERT INTO product(product_name, image_path) VALUES('%s', '%s')";
	db_query($query, $product_name, $image_path); */
 
 $pid = db_insert('product')
->fields(array(
'pname' => $product_name,
'$img_path' => $img_path,
))
->execute();
 
	drupal_set_message(t('Product has been added successfully.'));
}

/*
function edit_product_form() {
	$productid = arg(2);
 
	$query = "SELECT * FROM {product} WHERE productid = '%d'";
	$rs = db_query($query, $productid);
	$product_data = db_fetch_object($rs);
 
	$form['_product'] = array('#type' => 'value', '#value' => $product_data);
	$form['productid'] = array('#type' => 'value', '#value' => $product_data->productid);
 
	$form['product_name'] = array(
	'#title' => t('Product Name'),
	'#type' => 'textfield',
	'#default_value' => stripslashes($product_data->product_name),
	'#required' => TRUE,
	'#description' => t('Please enter product name.'),
	);
 
	// Product picture
	$form['picture'] = array('#type' => 'fieldset', '#title' => t('Product image'));
    	$picture = theme('product_picture', (object)$product_data);
    	if ($product_data->image_path) {
      		$form['picture']['current_picture'] = array('#value' => $picture);
      		$form['picture']['picture_delete'] = array('#type' => 'checkbox', '#title' => t('Delete picture'), 
	  		'#description' => t('Check this box to delete your current picture.'));
    	}
    	else {
     		$form['picture']['picture_delete'] = array('#type' => 'hidden');
    	}
    	$form['picture']['picture_upload'] = array('#type' => 'file', '#title' => t('Upload product image'), '#size' => 48, 
		'#description' => t('Maximum dimensions are %dimensions and the maximum size is %size kB.', 
		array('%dimensions' => '250x250', '%size' => '30')));
 
    	$form['#validate'][] = 'product_validate_picture';
 
	$form['#redirect'] = 'product_list';
 
	$form['#attributes']['enctype'] = 'multipart/form-data';
 
	return $form;
}

function edit_product_form_submit($form_id, $form) {
	$form_values = $form['values'];
 
	$product_name = trim($form_values['product_name']);
	$image_path = $form_values['_product']->image_path;
 
	 // Delete picture if requested, and if no replacement picture was given.
  	if (!empty($form_values['picture_delete']) && $form_values['picture'] == '') {
    	if ($form_values['_product']->image_path && file_exists($form_values['_product']->image_path)) {
	      	file_delete($form_values['_product']->image_path);
    	}
    	$image_path = '';
  	}
 
	if (isset($form_values['picture']) && $form_values['picture'] != '') {
		$image_path = $form_values['picture'];
	}
 
	$query = "UPDATE {product} SET product_name = '%s', image_path = '%s' WHERE productid = '%d'";
	db_query($query, $product_name, $image_path, $productid);
 
	drupal_set_message(t('Product has been updated successfully.'));
}

function product_theme() {
  	return array(
    	'product_picture' => array(
      	'arguments' => array('product' => NULL),
      	'template' => 'product-picture',
    	),
  	);
}
 
function template_preprocess_product_picture(&$variables) {
    $variables['picture'] = '';
 
    $product = $variables['product'];
    if (!empty($product->image_path) && file_exists($product->image_path)) {
      $picture = file_create_url($product->image_path);
    }
    else if (variable_get('product_picture_default', '')) {
      $picture = variable_get('product_picture_default', '');
    }
 
    if (isset($picture)) {
      $alt = t("@product's picture", array('@product' => $product->product_name ));
      $variables['picture'] = theme('image', $picture, $alt, $alt, '', FALSE);
    }
}*/

